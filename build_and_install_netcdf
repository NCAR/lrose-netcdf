#! /bin/bash
#
# Building and installing NETCDF and HDF5 as required by LROSE
# ============================================================
#
# The latest tar files reside in the 'tar_files' subdirectory.
#
# By default the target install directory is $HOME/lrose,
# so that libraries and applications will be installed in:
#
#   $HOME/lrose/include
#   $HOME/lrose/lib
#   $HOME/lrose/bin
#
# You can change the install location by using the -x command line
# argument to this script.
#
# If you need to support packages other than LROSE, it is a good
# idea to install into /usr/local. To do this:
#
#    build_and_install_netcdf -x /usr/local
#
# This will install in:
#
#   /usr/local/lrose/include
#   /usr/local/lrose/lib
#   /usr/local/lrose/bin
#

# save starting location and script name

startingDir=`pwd`
runDir=$(basename $startingDir)
scriptName=$(basename $0)

# defaults

prefix=${HOME}/lrose
debug=false
complete=false

#--------------------------------------------------------------------
# usage function
#

function usage() {
    echo
    echo "Usage: $scriptName [options below]"
    echo "  -h   :  produce this usage list"
    echo "  -d   :  turn debugging on"
    echo "  -c   :  complete install - includes fortran, c++ and udunits support"
    echo "  -x ? :  set prefix"
    echo "           default is '${HOME}/lrose'"
    echo
}

# Parse command line options.
while getopts hdcx: OPT; do
    case "$OPT" in
        h)
            usage
            exit 0
            ;;
        d)
            debug=true
            ;;
        c)
            complete=true
            ;;
        x)
            prefix=$OPTARG
            ;;
        \?)
            # getopts issues an error message
            echo "Problems with command line usage"
            usage
            exit 1
            ;;
    esac
done

if [ "$debug" == "true" ]
then
  echo "Running $scriptName"
  echo "  runDir: $runDir"
  echo "  installing in prefix: $prefix"
  if [ "$complete" == "true" ]
  then
    echo "Complete install - including fortran, c++ and udunits support"
  fi
fi

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# start in the netcdf_tar_files directory

cd tar_files || exit 1

#  Building HDF5
#  -------------

tar xvfz hdf5-*.tar.gz    # this may untar over a previous directory
cd hdf5-*/
export FC=gfortran
export F90=gfortran
export F77=gfortran
if [ "$complete" == "true" ]
then
    ./configure --prefix=${prefix} --enable-cxx --enable-fortran --enable-tests=no || exit 1
else
    ./configure --prefix=${prefix} --enable-cxx --enable-tests=no || exit 1
fi
make clean || exit 1  # remove files from previous builds, if any
make -j 8 || exit 1
make install || exit 1
cd ..

# Building udunits2
# -----------------

if [ "$complete" == "true" ]
then
    tar xvfz udunits-*.tar.gz # this may untar over a previous directory
    cd udunits-*/
    ./configure --prefix=${prefix} || exit 1
    make clean || exit 1  # remove files from previous builds, if any
    make -j 8 || exit 1
    make install || exit 1
    cd ..
fi

# When building the netCDF libraries below, make sure we use
# the hdf5 libraries we installed above

export CPPFLAGS=-I${prefix}/include
export LDFLAGS="-L${prefix}/lib -L${prefix}/lib64 -Wl,-rpath=${prefix}/lib"

# Building netcdf C
# -----------------

tar xvfz netcdf-c-*.tar.gz # this may untar over a previous directory
cd netcdf-c-*/
./configure --enable-netcdf4 --enable-shared --prefix=${prefix} || exit 1
make clean || exit 1  # remove files from previous builds, if any
make -j 8 || exit 1
make install || exit 1
cd ..

# ---------------------------
# append USE_NETCDF4 to FLAGS

export CFLAGS="$CFLAGS -DUSE_NETCDF4"
export CPPFLAGS="$CPPFLAGS -DUSE_NETCDF4"
export LDFLAGS="$LDFLAGS -DUSE_NETCDF4"
 
# Building netcdf Fortran
# ------------------------

if [ "$complete" == "true" ]
then
    tar xvfz netcdf-fortran*.tar.gz # this may untar over a previous directory
    cd netcdf-fortran*/
    ./configure --enable-shared --prefix=${prefix} || exit 1
    make clean || exit 1        # remove files from previous builds, if any
    make -j 8 || exit 1
    make install || exit 1
    cd ..
fi

# Building netcdf C++ legacy
# --------------------------

if [ "$complete" == "true" ]
then
    tar xvfz netcdf-cxx-4*.tar.gz # this may untar over a previous directory
    cd netcdf-cxx-4*/
    ./configure --enable-shared --prefix=${prefix} || exit 1
    make clean || exit 1      # remove files from previous builds, if any
    make -j 8 || exit 1
    make install || exit 1
    cd ..
fi

# Building netcdf C++ 4
# ---------------------

if [ "$complete" == "true" ]
then
    tar xvfz netcdf-cxx4-4*.tar.gz  # this may untar over a previous directory
    cd netcdf-cxx4-4*/
    ./configure --enable-shared --prefix=${prefix} || exit 1
    make clean || exit 1        # remove files from previous builds, if any
    make -j 8 || exit 1
    make install || exit 1
    cd ..
fi


